// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: gateway.proto

package gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Gateway_NamespaceAdd_FullMethodName    = "/Gateway/namespace_add"
	Gateway_NamespaceResize_FullMethodName = "/Gateway/namespace_resize"
	Gateway_NamespaceDelete_FullMethodName = "/Gateway/namespace_delete"
	Gateway_ListNamespaces_FullMethodName  = "/Gateway/list_namespaces"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	// Namespace operations
	NamespaceAdd(ctx context.Context, in *NamespaceAddReq, opts ...grpc.CallOption) (*NsidStatus, error)
	NamespaceResize(ctx context.Context, in *NamespaceResizeReq, opts ...grpc.CallOption) (*ReqStatus, error)
	NamespaceDelete(ctx context.Context, in *NamespaceDeleteReq, opts ...grpc.CallOption) (*ReqStatus, error)
	ListNamespaces(ctx context.Context, in *ListNamespacesReq, opts ...grpc.CallOption) (*NamespacesInfo, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) NamespaceAdd(ctx context.Context, in *NamespaceAddReq, opts ...grpc.CallOption) (*NsidStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NsidStatus)
	err := c.cc.Invoke(ctx, Gateway_NamespaceAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) NamespaceResize(ctx context.Context, in *NamespaceResizeReq, opts ...grpc.CallOption) (*ReqStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReqStatus)
	err := c.cc.Invoke(ctx, Gateway_NamespaceResize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) NamespaceDelete(ctx context.Context, in *NamespaceDeleteReq, opts ...grpc.CallOption) (*ReqStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReqStatus)
	err := c.cc.Invoke(ctx, Gateway_NamespaceDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ListNamespaces(ctx context.Context, in *ListNamespacesReq, opts ...grpc.CallOption) (*NamespacesInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NamespacesInfo)
	err := c.cc.Invoke(ctx, Gateway_ListNamespaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility.
type GatewayServer interface {
	// Namespace operations
	NamespaceAdd(context.Context, *NamespaceAddReq) (*NsidStatus, error)
	NamespaceResize(context.Context, *NamespaceResizeReq) (*ReqStatus, error)
	NamespaceDelete(context.Context, *NamespaceDeleteReq) (*ReqStatus, error)
	ListNamespaces(context.Context, *ListNamespacesReq) (*NamespacesInfo, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGatewayServer struct{}

func (UnimplementedGatewayServer) NamespaceAdd(context.Context, *NamespaceAddReq) (*NsidStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamespaceAdd not implemented")
}
func (UnimplementedGatewayServer) NamespaceResize(context.Context, *NamespaceResizeReq) (*ReqStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamespaceResize not implemented")
}
func (UnimplementedGatewayServer) NamespaceDelete(context.Context, *NamespaceDeleteReq) (*ReqStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamespaceDelete not implemented")
}
func (UnimplementedGatewayServer) ListNamespaces(context.Context, *ListNamespacesReq) (*NamespacesInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}
func (UnimplementedGatewayServer) testEmbeddedByValue()                 {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	// If the following call pancis, it indicates UnimplementedGatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_NamespaceAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).NamespaceAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_NamespaceAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).NamespaceAdd(ctx, req.(*NamespaceAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_NamespaceResize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceResizeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).NamespaceResize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_NamespaceResize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).NamespaceResize(ctx, req.(*NamespaceResizeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_NamespaceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).NamespaceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_NamespaceDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).NamespaceDelete(ctx, req.(*NamespaceDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_ListNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ListNamespaces(ctx, req.(*ListNamespacesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "namespace_add",
			Handler:    _Gateway_NamespaceAdd_Handler,
		},
		{
			MethodName: "namespace_resize",
			Handler:    _Gateway_NamespaceResize_Handler,
		},
		{
			MethodName: "namespace_delete",
			Handler:    _Gateway_NamespaceDelete_Handler,
		},
		{
			MethodName: "list_namespaces",
			Handler:    _Gateway_ListNamespaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway.proto",
}
